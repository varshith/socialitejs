<?php
/**
* @file
* Socialite.js - integration with Drupal 7
*/

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function socialitejs_help($path, $arg) {
  switch ($path) {
    case "admin/help#socialitejs":
      return '<p>'.  t("Socialite.js - integration with Drupal 7") .'</p>';
      break;
  }
} 

/**
* Implements hook_menu().
*/
function socialitejs_menu() {
  $items = array();

  $items['admin/config/content/socialitejs'] = array(
    'title' => 'SocialiteJS',
    'description' => 'Socialite.js - integration with Drupal 7',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialitejs_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );  
  return $items;
}

/**
* Implements hook_preprocess_page.
*/
function socialitejs_preprocess_page(&$variables) {
  if(!empty($variables['node'])){
	if ($path = libraries_get_path('socialitejs')) {
	  $loading = variable_get('socialitejs_loading', 'page');
	  drupal_add_js($path . '/socialite.js');
	  drupal_add_js(drupal_get_path('module', 'socialitejs') . '/js/socialitejs.js');
	  drupal_add_js(array('socialitejs' => array('loading' => $loading)), 'setting');
	}
  }
}

/**
 * Implements hook_node_view().
 */
function socialitejs_node_view($node, $view_mode, $language) {
  if ($view_mode == 'teaser' || ($view_mode == 'full')) {
	$nodeTypes =  variable_get('socialitejs_node_types', array());
	if (isset($nodeTypes[$node->type]) && ($nodeTypes[$node->type])) {
	 $sites = variable_get('socialitejs_sites', array());	
	foreach ($sites as $site => $enabled) {
	 if ($enabled) {
          $node->content['socialitejs'][] = _socialitejs_link($site, $node);
		  }
      }
      $node->content['socialitejs']['#prefix'] = '<div class="socialitejs">';
      $node->content['socialitejs']['#suffix'] = '</div>';
	}
  }
}

/**
 * Function to build the links for the given websites
 */
function _socialitejs_link($site, &$node) {
global $base_url;
  // check for an alias on the node
  if (!isset($node->link)) {
    $row = db_query("SELECT alias FROM {url_alias} WHERE source = :src", array(':src' => 'node/'. $node->nid));
    $alias = $row->fetchColumn();
    $url = $base_url .'/'. ($alias ? $alias : 'node/'. $node->nid);
  }
  else {
    $url = $node->link;
  }
  // if the shorten_urls module is installed & enabled, shorten the url being shared.
  if (module_exists('shorten')) {
    $url = shorten_url($url);
  }
  $title = $node->title;
  $link = array();
  $box = variable_get('socialitejs_layout', 0);
  
switch($site)
{
case 'facebook':
	if($box)
	$options = array('attributes' => array('class' => 'socialite facebook-like', 'data-href' => $url, 'data-layout' => 'box_count'));	
	else
	$options = array('attributes' => array('class' => 'socialite facebook-like', 'data-href' => $url));	
	$link = array(
    '#type'    => 'link',
    '#title'   => 'Facebook',
    '#href'    => 'http://www.facebook.com/sharer.php?u='.$url.'&amp;t='.$title,
    '#options' => $options,
    '#suffix'  => '&nbsp;',
  );
	break;
case 'twitter':
	if($box)
	$options = array('attributes' => array('class' => 'socialite twitter-share', 'data-url' => $url, 'data-count' => 'vertical'));
	else
	$options = array('attributes' => array('class' => 'socialite twitter-share', 'data-url' => $url));
	$link = array(
    '#type'    => 'link',
    '#title'   => 'Twitter',
    '#href'    => 'http://twitter.com/share',
    '#options' => $options,
    '#suffix'  => '&nbsp;',
  );
  break;
case 'googleplus':
	if($box)
	$options = array('attributes' => array('class' => 'socialite googleplus-one', 'data-href' => $url, 'data-size' => 'tall'));
	else
	$options = array('attributes' => array('class' => 'socialite googleplus-one', 'data-href' => $url, 'data-size' => 'tall', 'data-annotation' => 'inline'));
	$link = array(
    '#type'    => 'link',
    '#title'   => 'Google+',
    '#href'    => 'https://plus.google.com/share?url='.$url,
    '#options' => $options,
    '#suffix'  => '&nbsp;',
  );
  break;
 case 'linkedin':
	if($box)
	$options = array('attributes' => array('class' => 'socialite linkedin-share', 'data-url' => $url, 'data-counter' => 'top'));
	else
	$options = array('attributes' => array('class' => 'socialite linkedin-share', 'data-url' => $url, 'data-counter' => 'right'));
	$link = array(
    '#type'    => 'link',
    '#title'   => 'LinkedIn',
    '#href'    => 'http://www.linkedin.com/shareArticle?mini=true&amp;url='.$url.'&amp;title='.$title,
    '#options' => $options,
    '#suffix'  => '&nbsp;',
  );
  break;
}
return $link;
} 

/**
* Page callback: SocialiteJS settings
*
* @see socialitejs_menu()
*/
function socialitejs_form($form, &$form_state) {
  $types = node_type_get_types();
  foreach ($types as $type) {
    $node_types[$type->type] = $type->name;
  }

  $form['socialitejs_node_types'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Node types'),
    '#description'   => t('Select the node types to display the share links on.'),
    '#default_value' => variable_get('socialitejs_node_types', array()),
    '#options'       => $node_types,
  );
  
  $form['socialitejs_sites'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Widgets'),
    '#description'   => t('Select the share links you would like to enable.'),
    '#default_value' => variable_get('socialitejs_sites', array()),
    '#options'       => array(
      'facebook'     => t('Facebook'),
      'twitter'      => t('Twitter'),
	  'googleplus'      => t('Google+'),
	  'linkedin'      => t('LinkedIn'),
    ),
  );
  
  $form['socialitejs_layout'] = array(
    '#type'          => 'radios',
    '#title'         => t('Layout'),
    '#description'   => t('Select a layout you would like to have for share links.'),
    '#default_value' => variable_get('socialitejs_layout', 0),
    '#options'       => array(
		'0' => t('Button Count'),
		'1' => t('Box Count'),
	),
  );
  
    $form['socialitejs_loading'] = array(
    '#type'          => 'radios',
    '#title'         => t('Loading method'),
    '#description'   => t('Select the way you would want to load the socialite buttons.'),
    '#default_value' => variable_get('socialitejs_loading', 'page'),
    '#options'       => array(
		'page' => t('On page load'),
		'hover' => t('On hover (lazyload)'),
	),
  );
  return system_settings_form($form);
}